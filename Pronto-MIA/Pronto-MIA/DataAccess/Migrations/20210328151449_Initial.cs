// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Pronto_MIA.DataAccess.Migrations
{
    public partial class Initial : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Speakers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Bio = table.Column<string>(type: "character varying(4000)", maxLength: 4000, nullable: true),
                    WebSite = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Speakers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserName = table.Column<string>(type: "text", nullable: false),
                    PasswordHash = table.Column<byte[]>(type: "bytea", nullable: false),
                    HashGenerator = table.Column<string>(type: "text", nullable: true),
                    HashGeneratorOptions = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "HashGenerator", "HashGeneratorOptions", "PasswordHash", "UserName" },
                values: new object[] { -1, "Pbkdf2Generator", "{\"SaltSize\":128,\"HashIterations\":1500,\"HashSize\":512,\"Salt\":\"PT1tWVn3kmk4de9xlaGcnzYMrRHgyKnmNAYrd6G1EVy6K0I/wZhiOSLXKJ5XuX1T72rxrYOkhNAwWcDJnYpF1myPmMIMJlGcs1J0sVRt2JDpnz04iXSoG7m+vGHOzv/mffPQc4yV7MBd+lM46l0jozVMCAwic9NOjmGXdGoNkFk=\"}", new byte[] { 115, 49, 179, 22, 228, 50, 53, 148, 86, 31, 12, 144, 44, 202, 20, 23, 228, 40, 85, 46, 33, 90, 212, 107, 220, 94, 0, 199, 122, 145, 63, 22, 51, 25, 191, 73, 158, 176, 251, 149, 23, 126, 90, 44, 6, 89, 217, 252, 217, 117, 106, 73, 38, 88, 103, 143, 246, 183, 42, 43, 77, 4, 210, 83, 89, 66, 189, 114, 144, 52, 154, 20, 138, 42, 161, 202, 10, 203, 136, 101, 24, 19, 50, 28, 174, 111, 71, 176, 26, 128, 139, 112, 6, 172, 72, 127, 155, 46, 81, 173, 166, 233, 180, 22, 243, 158, 199, 23, 170, 63, 32, 247, 69, 67, 1, 14, 195, 131, 237, 16, 157, 115, 165, 242, 230, 5, 44, 33, 143, 250, 220, 43, 197, 128, 249, 103, 164, 155, 125, 53, 158, 141, 27, 252, 227, 149, 118, 246, 71, 1, 226, 187, 185, 86, 155, 246, 76, 127, 85, 82, 68, 39, 138, 181, 155, 117, 124, 148, 166, 186, 248, 230, 91, 180, 188, 254, 68, 121, 167, 29, 225, 232, 37, 3, 248, 125, 42, 172, 79, 244, 19, 214, 216, 58, 217, 108, 4, 90, 216, 41, 128, 49, 231, 200, 122, 236, 36, 176, 150, 237, 116, 77, 222, 30, 223, 32, 144, 66, 48, 152, 221, 74, 5, 167, 98, 159, 95, 14, 71, 133, 239, 175, 221, 32, 81, 92, 56, 159, 80, 173, 197, 155, 43, 6, 84, 236, 100, 227, 218, 242, 164, 139, 223, 160, 155, 51, 219, 214, 6, 97, 161, 32, 155, 206, 85, 30, 223, 120, 73, 112, 124, 126, 211, 181, 64, 181, 67, 234, 116, 77, 145, 174, 167, 23, 203, 163, 10, 39, 52, 254, 29, 219, 236, 147, 8, 46, 143, 215, 79, 150, 74, 250, 129, 6, 144, 203, 2, 107, 5, 113, 163, 115, 231, 176, 80, 221, 6, 127, 70, 188, 199, 198, 17, 79, 165, 136, 62, 148, 75, 40, 160, 85, 20, 238, 113, 100, 117, 198, 136, 202, 42, 206, 234, 184, 193, 9, 109, 59, 219, 110, 184, 71, 239, 37, 41, 234, 190, 132, 92, 187, 98, 192, 175, 57, 181, 99, 230, 153, 214, 128, 232, 120, 22, 190, 223, 29, 217, 86, 208, 26, 193, 51, 166, 9, 211, 185, 115, 50, 107, 160, 253, 203, 116, 5, 158, 235, 154, 199, 239, 19, 64, 148, 140, 116, 19, 23, 8, 149, 201, 13, 45, 13, 241, 186, 170, 29, 76, 243, 168, 65, 23, 28, 239, 142, 147, 252, 84, 197, 98, 20, 75, 175, 176, 102, 49, 118, 76, 77, 159, 131, 22, 216, 214, 61, 58, 2, 7, 172, 158, 186, 72, 99, 103, 175, 60, 97, 166, 138, 74, 190, 134, 71, 136, 149, 164, 28, 199, 62, 110, 59, 82, 42, 38, 121, 1, 33, 150, 209, 212, 113, 239, 150, 121, 74, 185, 101, 113, 20, 51, 238, 33, 40, 155, 144, 45, 225, 168, 121, 190, 251, 109, 86, 233, 47, 249, 165, 160, 131, 237, 136, 236, 201 }, "Franz" });

            migrationBuilder.CreateIndex(
                name: "IX_Users_UserName",
                table: "Users",
                column: "UserName",
                unique: true);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Speakers");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
