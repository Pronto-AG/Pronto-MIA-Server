// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pronto_MIA.DataAccess;

namespace Pronto_MIA.DataAccess.Migrations
{
    [DbContext(typeof(ProntoMIADbContext))]
    [Migration("20210401170420_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Pronto_MIA.Domain.Entities.DeploymentPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("AvailableUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("fileUUID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("fileUUID")
                        .IsUnique();

                    b.ToTable("DeploymentPlans");
                });

            modelBuilder.Entity("Pronto_MIA.Domain.Entities.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Bio")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("Pronto_MIA.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("HashGenerator")
                        .HasColumnType("text");

                    b.Property<string>("HashGeneratorOptions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            HashGenerator = "Pbkdf2Generator",
                            HashGeneratorOptions = "{\"SaltSize\":128,\"HashIterations\":1500,\"HashSize\":512,\"Salt\":\"QLAXpMnjv8IEXV7Us9s/PQyTdgkXNQAqzmaoluosUrxLSlwA2syujFv1vt/F9vHhomHN/Vawlj6kxjJwUr6XckpCcSFYFpqA0cmLC9d3D7MJAtZpA3ni5qk4estvu4Rpv4ICZj1/E+kbtZ+M4c3GjLcT8W4XmB3yutChzp3+R34=\"}",
                            PasswordHash = new byte[] { 212, 181, 205, 89, 25, 209, 82, 136, 41, 165, 82, 176, 254, 146, 42, 159, 244, 72, 138, 228, 12, 174, 92, 245, 65, 38, 25, 209, 89, 80, 160, 169, 164, 180, 255, 253, 136, 170, 1, 241, 47, 208, 5, 71, 101, 40, 196, 77, 229, 169, 248, 74, 124, 96, 236, 248, 190, 90, 174, 216, 195, 28, 25, 225, 224, 56, 154, 135, 40, 15, 124, 48, 66, 22, 7, 12, 254, 125, 252, 50, 67, 28, 164, 118, 132, 58, 19, 23, 0, 90, 38, 160, 141, 197, 110, 137, 196, 233, 12, 124, 39, 225, 36, 98, 139, 229, 148, 202, 235, 37, 55, 202, 236, 200, 248, 178, 59, 115, 236, 83, 43, 166, 109, 153, 108, 109, 1, 167, 230, 166, 66, 249, 9, 100, 75, 250, 13, 36, 119, 255, 146, 252, 94, 199, 89, 8, 77, 239, 172, 240, 62, 139, 90, 239, 232, 63, 99, 82, 216, 67, 19, 157, 143, 28, 31, 242, 240, 119, 185, 205, 181, 191, 18, 217, 79, 41, 163, 249, 106, 91, 94, 185, 107, 67, 0, 180, 244, 243, 100, 100, 236, 236, 53, 205, 227, 202, 170, 101, 195, 56, 215, 157, 73, 29, 247, 211, 69, 214, 40, 61, 126, 204, 248, 248, 145, 53, 63, 40, 168, 220, 216, 42, 42, 46, 186, 160, 27, 214, 252, 175, 152, 212, 77, 1, 160, 131, 232, 120, 194, 38, 111, 223, 12, 227, 101, 192, 38, 245, 165, 30, 3, 81, 200, 123, 77, 232, 174, 168, 136, 89, 134, 51, 164, 180, 177, 139, 242, 159, 97, 205, 145, 139, 14, 103, 229, 234, 66, 144, 91, 171, 184, 25, 174, 250, 86, 176, 5, 247, 220, 45, 124, 121, 188, 8, 27, 2, 250, 166, 85, 252, 114, 183, 2, 209, 105, 205, 203, 171, 251, 164, 17, 20, 20, 243, 61, 4, 65, 183, 191, 204, 207, 3, 201, 222, 159, 216, 3, 145, 133, 109, 219, 203, 222, 73, 56, 137, 35, 104, 248, 235, 231, 94, 134, 21, 212, 76, 85, 213, 135, 166, 109, 77, 190, 248, 164, 88, 233, 255, 116, 43, 129, 43, 73, 158, 215, 17, 10, 119, 62, 223, 139, 65, 66, 122, 42, 58, 168, 1, 78, 239, 123, 200, 168, 239, 228, 225, 153, 243, 144, 9, 58, 22, 61, 20, 202, 55, 164, 255, 233, 139, 99, 188, 14, 139, 125, 124, 171, 124, 24, 135, 220, 97, 23, 28, 21, 190, 247, 166, 90, 251, 24, 97, 160, 87, 50, 129, 119, 72, 168, 187, 209, 220, 97, 174, 80, 61, 178, 40, 94, 186, 36, 205, 170, 38, 184, 252, 249, 72, 133, 51, 16, 224, 23, 23, 185, 79, 229, 65, 17, 114, 126, 116, 14, 30, 147, 251, 137, 82, 19, 44, 59, 184, 40, 80, 173, 85, 237, 216, 29, 231, 228, 165, 243, 106, 88, 128, 234, 138, 244, 84, 192, 88, 151, 207, 137, 149, 169, 153, 150, 58, 214, 129, 22, 58, 162, 117, 205, 21, 23, 65, 137, 80 },
                            UserName = "Franz"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
