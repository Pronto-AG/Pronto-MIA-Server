name: Server CI
on: push

jobs:
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Load Nuget cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore solution
        working-directory: ./Pronto-MIA
        run: dotnet restore

      - name: Lint by treating warnings as errors
        working-directory: ./Pronto-MIA
        run: |
#             dotnet build -c release -o ./app --no-restore -warnAsError | tee ./buildlog.txt
#             grep '0 Error(s)' ./buildlog.txt
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    container: mcr.microsoft.com/dotnet/sdk:5.0
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Load Nuget cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore solution
        working-directory: ./Pronto-MIA
        run: dotnet restore

      - name: Run Tests
        working-directory: ./Pronto-MIA
        run: dotnet test --no-restore

  build-dev:
    name: Test build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build docker
        run: docker build .

  build-docker-master:
    name: Push Docker image to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Github-Containers
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/pronto-ag/pronto-mia-server:master

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-docker-release:
    name: Push Docker image to GitHub Container Registry
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Set release tag env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to Github-Containers
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
                ghcr.io/pronto-ag/pronto-mia-server:${{ env.RELEASE_VERSION }}
                ghcr.io/pronto-ag/pronto-mia-server:latest
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  build-documentation:
    name: Build documentation and update release
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build documentation
        uses: mattnotmitt/doxygen-action@v1
        with:
          doxyfile-path: ./doxygen.conf
          enable-latex: true

      - name: Zip documentation
        uses: thedoctor0/zip-release@master
        with:
          filename: 'documentation.zip'
          path: ./doc

      - name: Save documentation
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: documentation.zip
          retention-days: 1

  create-release:
    name: Create new release
    runs-on: ubuntu-latest
    needs: [build-docker-release, build-documentation]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Get documentation
        uses: actions/download-artifact@v2
        with:
          name: documentation
  
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: documentation.zip
          body_path: ./CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
